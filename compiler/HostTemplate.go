package main
import "C"

const HostHeaderTemplate = `
// Code generated by OpenFFI. DO NOT EDIT.
// Host code for {{.IDLFilenameWithExtension}}
`

const HostPackageTemplate = `package {{.Package}}
`


const HostImports = `
import "fmt"
import "unsafe"
`

const HostCImportTemplate = `
/*
#cgo !windows LDFLAGS: -L. -ldl
#cgo CFLAGS: -I{{GetEnvVar "OPENFFI_HOME"}}

#include <stdlib.h>
#include <stdint.h>
#include <include/cdt_structs.h>
#include <include/cdt_capi_loader.h>
#include <include/cdt_capi_loader.c>

openffi_size get_int_item(openffi_size* array, int index)
{
	return array[index];
}

void* convert_union_to_ptr(void* p)
{
	return p;
}

void set_cdt_type(struct cdt* p, openffi_type t)
{
	p->type = t;
}


*/
import "C"
`

const HostHelperFunctions = `
func init(){
	err := C.load_cdt_capi()
	if err != nil{
		panic("Failed to load OpenFFI XLLR functions: "+C.GoString(err))
	}
}
`

const HostFunctionStubsTemplate = `
{{ $pfn := .IDLFilename}}
{{range $mindex, $m := .Modules}}

// Code to call foreign functions in module {{$m.Name}} via XLLR
{{range $findex, $f := $m.Functions}}
// Call to foreign {{$f.PathToForeignFunction.function}}
{{if $f.Comment}}/*
{{$f.Comment}}
*/{{end}}
{{range $index, $elem := $f.Parameters}}
{{if $elem.Comment}}// {{$elem.Name}} - {{$elem.Comment}}{{end}}{{end}}
var {{$f.PathToForeignFunction.function}}_id int64 = -1
func {{AsPublic $f.PathToForeignFunction.function}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} {{$elem.Name}} {{if $elem.IsArray}}[]{{end}}{{if $elem.InnerTypes}}*{{end}}{{$elem.Type}}{{if eq $elem.Type "map"}}[{{$elem.MapKeyType}}]{{$elem.MapValueType}}{{end}}{{end}}) ({{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}} {{if $elem.IsArray}}[]{{end}}{{if $elem.InnerTypes}}*{{end}}{{$elem.Type}}{{if eq $elem.Type "map"}}[{{$elem.MapKeyType}}]{{$elem.MapValueType}}{{end}}{{end}}{{if $f.ReturnValues}},{{end}} err error){

	runtime_plugin := "xllr.{{$m.TargetLanguage}}"
	pruntime_plugin := C.CString(runtime_plugin)
	defer C.free(unsafe.Pointer(pruntime_plugin))

	if {{$f.PathToForeignFunction.function}}_id == -1{

		// load function (no need to use a lock)

		path := "{{$f.PathToForeignFunctionAsString}}"
		ppath := C.CString(path)
		defer C.free(unsafe.Pointer(ppath))

		var out_err *C.char
		var out_err_len C.uint32_t
		out_err_len = C.uint32_t(0)
		{{$f.PathToForeignFunction.function}}_id = int64(C.xllr_load_function(pruntime_plugin, C.uint(len(runtime_plugin)), ppath, C.uint(len(path)), C.int64_t(-1), &out_err, &out_err_len))
		
		if {{$f.PathToForeignFunction.function}}_id == -1{ // failed
			err = fmt.Errorf("Failed to load function %v: %v", "{{$f.PathToForeignFunction.function}}", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
			return
		}
	}

	{{ $paramsLength := len $f.Parameters }}{{ $returnLength := len $f.ReturnValues }}

	parameters := C.alloc_cdts_buffer( {{$paramsLength}} )
	return_values := C.alloc_cdts_buffer( {{$returnLength}} )
	
	// parameters
	{{range $index, $elem := $f.Parameters}}
	
	{{if $elem.IsString}}
	{{if gt $elem.Dimensions 0}}
	// string array

	in_{{$elem.Name}} := (*C.openffi_string)(C.malloc(C.ulong(len({{$elem.Name}}))*{{Sizeof $elem}}))
	in_{{$elem.Name}}_sizes := (*C.openffi_size)(C.malloc(C.ulong(len({{$elem.Name}}))*C.sizeof_openffi_size))
	in_{{$elem.Name}}_dimensions := C.openffi_size(1)
	in_{{$elem.Name}}_dimensions_lengths := (*C.openffi_size)(C.malloc(C.sizeof_openffi_size * (in_{{$elem.Name}}_dimensions)))
	*in_{{$elem.Name}}_dimensions_lengths = C.openffi_size(len({{$elem.Name}}))
	
	for i, val := range {{$elem.Name}}{
		C.set_openffi_string_element(in_{{$elem.Name}}, in_{{$elem.Name}}_sizes, C.int(i), C.openffi_string(C.CString(val)), C.openffi_size(len(val)))
	}
	
	in_{{$elem.Name}}_cdt := C.get_cdt(parameters, {{$index}})
	C.set_cdt_type(in_{{$elem.Name}}_cdt, C.openffi_{{$elem.Type}}_array_type)
	in_{{$elem.Name}}_cdt.free_required = 1
	pcdt_in_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}}_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_{{$elem.Name}}_cdt.cdt_val))))
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.vals = in_{{$elem.Name}}
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.vals_sizes = in_{{$elem.Name}}_sizes
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.dimensions_lengths = in_{{$elem.Name}}_dimensions_lengths
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.dimensions = in_{{$elem.Name}}_dimensions

	{{else}}
	// string
	in_{{$elem.Name}}_len := C.openffi_size(C.ulong(len({{$elem.Name}})))
	in_{{$elem.Name}} := C.CString({{$elem.Name}})
	
	in_{{$elem.Name}}_cdt := C.get_cdt(parameters, {{$index}})
	C.set_cdt_type(in_{{$elem.Name}}_cdt, C.openffi_{{$elem.Type}}_type)
	in_{{$elem.Name}}_cdt.free_required = 1
	pcdt_in_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}})(C.convert_union_to_ptr(unsafe.Pointer(&in_{{$elem.Name}}_cdt.cdt_val))))
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.val = in_{{$elem.Name}}
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.length = in_{{$elem.Name}}_len

	{{end}}{{else}}{{if gt $elem.Dimensions 0}}
	// non-string array
	
	in_{{$elem.Name}}_dimensions := C.openffi_size(1)
	in_{{$elem.Name}}_dimensions_lengths := (*C.openffi_size)(C.malloc(C.sizeof_openffi_size))
	*in_{{$elem.Name}}_dimensions_lengths = C.ulong(len({{$elem.Name}}))

	in_{{$elem.Name}} := (*C.openffi_{{$elem.Type}})(C.malloc(C.ulong(len({{$elem.Name}}))*{{Sizeof $elem}}))
	for i, val := range {{$elem.Name}}{
		C.set_openffi_{{$elem.Type}}_element(in_{{$elem.Name}}, C.int(i), C.openffi_{{$elem.Type}}(val))
	}

	in_{{$elem.Name}}_cdt := C.get_cdt(parameters, {{$index}})
	C.set_cdt_type(in_{{$elem.Name}}_cdt, C.openffi_{{$elem.Type}}_array_type)
	in_{{$elem.Name}}_cdt.free_required = 1
	pcdt_in_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}}_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_{{$elem.Name}}_cdt.cdt_val))))
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.vals = in_{{$elem.Name}}
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.dimensions_lengths = in_{{$elem.Name}}_dimensions_lengths
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.dimensions = in_{{$elem.Name}}_dimensions

	{{else}}
	// non-string
	
	{{if $elem.IsBool}}
	var in_{{$elem.Name}} C.openffi_bool
	if {{$elem.Name}} { 
		in_{{$elem.Name}} = C.openffi_bool(1)
	} else { 
		in_{{$elem.Name}} = C.openffi_bool(0)
	}
	{{else}}
	in_{{$elem.Name}} := C.openffi_{{$elem.Type}}({{$elem.Name}})
	{{end}}
	in_{{$elem.Name}}_cdt := C.get_cdt(parameters, {{$index}})
	C.set_cdt_type(in_{{$elem.Name}}_cdt, C.openffi_{{$elem.Type}}_type)
	in_{{$elem.Name}}_cdt.free_required = 1
	pcdt_in_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}})(C.convert_union_to_ptr(unsafe.Pointer(&in_{{$elem.Name}}_cdt.cdt_val))))
	pcdt_in_{{$elem.Type}}_{{$elem.Name}}.val = in_{{$elem.Name}}
	{{end}}
	{{end}}
	{{end}}	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_call(pruntime_plugin, C.uint(len(runtime_plugin)),
			C.int64_t({{$f.PathToForeignFunction.function}}_id),
			parameters, {{$paramsLength}},
			return_values, {{$returnLength}},
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}

	{{range $index, $elem := $f.ReturnValues}}

	{{if $elem.IsString}}
	
	{{if gt $elem.Dimensions 0}}
	// string[] // TODO: handle multi-dimensional arrays
	out_{{$elem.Name}}_cdt := C.get_cdt(return_values, {{$index}})
	pcdt_out_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}}_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_{{$elem.Name}}_cdt.cdt_val))))

	var out_{{$elem.Name}} *C.openffi_string = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.vals
	var out_{{$elem.Name}}_sizes *C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.vals_sizes
	var out_{{$elem.Name}}_dimensions_lengths *C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.dimensions_lengths
	//var out_{{$elem.Name}}_dimensions C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.dimensions - TODO: not used until multi-dimensions support!

	ret_{{$elem.Name}} := make([]{{$elem.Type}}, 0, int(C.get_int_item(out_{{$elem.Name}}_dimensions_lengths, 0)))
	for i:=C.int(0) ; i<C.int(C.get_int_item(out_{{$elem.Name}}_dimensions_lengths, 0)) ; i++{
		var str_size C.openffi_size
		str := C.get_openffi_string_element(out_{{$elem.Name}}, C.int(i), out_{{$elem.Name}}_sizes, &str_size)
		ret_{{$elem.Name}} = append(ret_{{$elem.Name}}, C.GoStringN(str, C.int(str_size)))
	}

	{{else}}

	// string
	out_{{$elem.Name}}_cdt := C.get_cdt(return_values, {{$index}})
	pcdt_out_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}})(C.convert_union_to_ptr(unsafe.Pointer(&out_{{$elem.Name}}_cdt.cdt_val))))
	var out_{{$elem.Name}}_len C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.length
	var out_{{$elem.Name}} C.openffi_string = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.val

	ret_{{$elem.Name}} := C.GoStringN(out_{{$elem.Name}}, C.int(out_{{$elem.Name}}_len))
	{{end}}{{else}}{{if $elem.IsArray}}

	// non-string array
	out_{{$elem.Name}}_cdt := C.get_cdt(return_values, {{$index}})
	pcdt_out_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}}_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_{{$elem.Name}}_cdt.cdt_val))))
	var out_{{$elem.Name}} *C.openffi_{{$elem.Type}} = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.vals
	var out_{{$elem.Name}}_dimensions_lengths *C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.dimensions_lengths
	// var out_{{$elem.Name}}_dimensions C.openffi_size = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.dimensions - TODO: not used until multi-dimensions support!
			
	ret_{{$elem.Name}} := make([]{{$elem.Type}}, 0)
	for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(out_{{$elem.Name}}_dimensions_lengths, 0))) ; i++{
		val := C.get_openffi_{{$elem.Type}}_element(out_{{$elem.Name}}, C.int(i))
		ret_{{$elem.Name}} = append(ret_{{$elem.Name}}, {{$elem.Type}}(val))
	}
	{{else}}

	// non-string
	out_{{$elem.Name}}_cdt := C.get_cdt(return_values, {{$index}})
	pcdt_out_{{$elem.Type}}_{{$elem.Name}} := ((*C.struct_cdt_openffi_{{$elem.Type}})(C.convert_union_to_ptr(unsafe.Pointer(&out_{{$elem.Name}}_cdt.cdt_val))))
	var out_{{$elem.Name}} C.openffi_{{$elem.Type}} = pcdt_out_{{$elem.Type}}_{{$elem.Name}}.val
	
	ret_{{$elem.Name}} := {{if eq $elem.Type "bool"}}out_{{$elem.Name}} != C.openffi_bool(0){{else}}{{$elem.Type}}(out_{{$elem.Name}}){{end}}
	{{end}}
	{{end}}
	{{end}}

	return {{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}ret_{{$elem.Name}}{{end}}{{if gt $returnLength 0}},{{end}} nil
}
{{end}}
{{end}}

`

