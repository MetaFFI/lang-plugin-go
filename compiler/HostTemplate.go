package main

import "C"

const HostHeaderTemplate = `
// Code generated by MetaFFI. DO NOT EDIT.
// Host code for {{.IDLFilenameWithExtension}}
`

const HostPackageTemplate = `package {{.Package}}
`

const HostFunctionStubsTemplate = `
import (
	"github.com/MetaFFI/lang-plugin-go/api"
	"github.com/MetaFFI/plugin-sdk/compiler/go/IDL"
	. "github.com/MetaFFI/lang-plugin-go/go-runtime"
)

{{ $pfn := .IDLSource}}
{{ $idl := . }}
{{ $targetRuntime := $idl.TargetLanguage }}

var runtime *api.MetaFFIRuntime
var mod *api.MetaFFIModule

// Entities Callers
{{range $mindex, $m := .Modules}}

{{range $findex, $f := $m.Globals}}
{{if $f.Getter}}var {{$f.Getter.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error){{end}}
{{if $f.Setter}}var {{$f.Setter.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error){{end}}
{{end}}{{/* End globals */}}

{{range $findex, $f := $m.Functions}}
var {{$f.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error)
{{end}}{{/* End Functions */}}

{{range $cindex, $c := $m.Classes}}
{{range $findex, $f := $c.Fields}}
{{if $f.Getter}}var {{$c.Name}}_{{$f.Getter.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error){{end}}
{{if $f.Setter}}var {{$c.Name}}_{{$f.Setter.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error){{end}}
{{end}}{{/* End Fields */}}
{{range $findex, $f := $c.Methods}}
var {{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error)
{{end}}{{/* End Methods */}}
{{range $findex, $f := $c.Constructors}}
var {{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error)
{{end}}{{/* End Constructor */}}
{{if $c.Releaser}}
var {{$c.Name}}_{{$c.Releaser.GetNameWithOverloadIndex}}_caller func(...interface{}) ([]interface{}, error)
{{end}}{{/* End Releaser */}}
{{end}}{{/* End Classes */}}
{{end}}{{/* End modules */}}

func BindModuleToCode(modulePath string){
	runtime = api.NewMetaFFIRuntime("{{$targetRuntime}}")
	err := runtime.LoadRuntimePlugin()
	if err != nil {
		panic(err)
	}

	mod, err = runtime.LoadModule(modulePath)
	if err != nil {
		panic(err)
	}

	// load functions
	loadFF := func(fpath string, params []IDL.MetaFFITypeInfo, retvals []IDL.MetaFFITypeInfo) (caller func(...interface{}) ([]interface{}, error)){
		var err error
		caller, err = mod.LoadWithAlias(fpath, params, retvals)
		if err != nil{ // failed
			panic(err)
		}
		return caller
	}

	{{ $idl := . }}
	{{range $mindex, $m := .Modules}}
	{{range $findex, $f := $m.Globals}}
	{{if $f.Getter}}{{$f.Getter.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.Getter.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.Getter}} ){{end}}
	{{if $f.Setter}}{{$f.Setter.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.Setter.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.Setter}} ){{end}}
	{{end}}{{/* End globals */}}
	
	{{range $findex, $f := $m.Functions}}
	{{$f.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.FunctionPathAsString $idl}}", {{len $f.Parameters}}, {{len $f.ReturnValues}})
	{{end}}{{/* End Functions */}}

	{{range $cindex, $c := $m.Classes}}
	{{range $findex, $f := $c.Fields}}
	{{if $f.Getter}}{{$c.Name}}_{{$f.Getter.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.Getter.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.Getter.FunctionDefinition}}){{end}}
	{{if $f.Setter}}{{$c.Name}}_{{$f.Setter.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.Setter.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.Setter.FunctionDefinition}}){{end}}
	{{end}}{{/* End Fields */}}
	{{range $findex, $f := $c.Methods}}
	{{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.FunctionDefinition}})
	{{end}}{{/* End Methods */}}
	{{range $findex, $f := $c.Constructors}}
	{{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller = loadFF("{{$f.FunctionPathAsString $idl}}", {{GetMetaFFITypeInfos $f.FunctionDefinition}})
	{{end}}{{/* End Constructor */}}
	{{end}}{{/* End Classes */}}
	{{end}}{{/* End modules */}}
}

func Free() error{
	return runtime.ReleaseRuntimePlugin()
}

{{range $mindex, $m := .Modules}}

{{range $findex, $f := $m.Globals}}
{{if $f.Getter}}
{{if $f.Comment}}/*
{{$f.Comment}}
*/{{end}}
func {{ToGoNameConv $f.Getter.GetNameWithOverloadIndex}}_Getter() ({{ConvertToGoType $f.ArgDefinition $m}}, error){
	{{ $paramsLength := len $f.Getter.Parameters }}{{ $returnLength := len $f.Getter.ReturnValues }}

	res, err := {{$f.Getter.GetNameWithOverloadIndex}}_caller()
	if err != nil{
		return err
	}

	return res[0].({{ConvertToGoType $f.ArgDefinition $m}}), nil
}
{{end}}{{/* End Getter */}}
{{if $f.Setter}}
func {{ToGoNameConv $f.Setter.GetNameWithOverloadIndex}}_Setter({{$f.Name}} {{ConvertToGoType $f.ArgDefinition $m}}) (err error){
	{{ $paramsLength := len $f.Setter.Parameters }}{{ $returnLength := len $f.Setter.ReturnValues }}

	_, err = {{$f.Getter.GetNameWithOverloadIndex}}_caller({{$f.Name}})
	return err
}
{{end}}{{/* End Setter */}}
{{end}}{{/* End Global */}}


// Code to call foreign functions in module {{$m.Name}} via XLLR
{{range $findex, $f := $m.Functions}}
// Call to foreign {{$f.Name}}
{{if $f.Comment}}/*
{{$f.Comment}}
*/{{end}}
{{range $index, $elem := $f.Parameters}}
{{if $elem.Comment}}// {{$elem.Name}} - {{$elem.Comment}}{{end}}{{end}}{{/* End Parameters comments */}}
func {{ToGoNameConv $f.GetNameWithOverloadIndex}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} {{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}) ({{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}{{if $f.ReturnValues}},{{end}} err error){

	var res []interface{}
	res, err = {{$f.GetNameWithOverloadIndex}}_caller({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} {{$elem.Name}}{{end}})

	{{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}res[$index].({{ConvertToGoType $elem $m}}){{end}}{{if $f.ReturnValues}},{{end}}, nil
}
{{end}}{{/* End Function */}}

{{range $cindex, $c := $m.Classes}}
type {{AsPublic $c.Name}} struct{
	h Handle
}

{{range $findex, $f := $c.Constructors}}
func New{{ToGoNameConv $f.GetNameWithOverloadIndex}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} {{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}) (instance *{{AsPublic $c.Name}}, err error){
	{{ $paramsLength := len $f.Parameters }}{{ $returnLength := len $f.ReturnValues }}

	var res []interface{}
	res, err = {{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}} {{$elem.Name}}{{end}})
	if err != nil{
		return
	}

	inst := &{{AsPublic $c.Name}}{
		h: res[0].(Handle),
	}
	
	return inst, nil	
}
{{end}}{{/* End Constructor */}}

func (this *{{AsPublic $c.Name}}) GetHandle() Handle{
	return this.h
}

func (this *{{AsPublic $c.Name}}) SetHandle(h Handle){
	this.h = h
}

{{range $findex, $f := $c.Fields}}
{{if $f.Getter}}
func {{GenerateMethodReceiverCode $f.Getter}} {{GenerateMethodName $f.Getter}}_Getter({{GenerateMethodParams $f.Getter $m}}) ({{range $index, $elem := $f.Getter.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}{{if $f.Getter.ReturnValues}},{{end}} err error){
	{{ $paramsLength := len $f.Getter.Parameters }}{{ $returnLength := len $f.Getter.ReturnValues }}

	var res []interface{}
	{{if $f.Getter.InstanceRequired}}
	res, err = {{$c.Name}}_{{$f.Getter.GetNameWithOverloadIndex}}_caller(this.h {{if gt $paramsLength 0}},{{end}} {{range $index, $elem := $f.Getter.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{else}}
	res, err = {{$c.Name}}_{{$f.Getter.GetNameWithOverloadIndex}}_caller({{range $index, $elem := $f.Getter.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{end}}
	if err != nil{
		return
	}
	
	return {{range $index, $elem := $f.Getter.ReturnValues}}{{if $index}},{{end}}res[{{$index}}].({{ConvertToGoType $elem $m}}){{end}}{{if $f.Getter.ReturnValues}},{{end}} nil
}
{{end}}{{/* End Getter */}}
{{if $f.Setter}}
func {{GenerateMethodReceiverCode $f.Setter}} {{GenerateMethodName $f.Setter}}_Setter({{GenerateMethodParams $f.Setter $m}}) ({{range $index, $elem := $f.Setter.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}{{if $f.Setter.ReturnValues}},{{end}} err error){
	{{ $paramsLength := len $f.Setter.Parameters }}{{ $returnLength := len $f.Setter.ReturnValues }}

	{{if $f.Getter.InstanceRequired}}
	_, err = {{$c.Name}}_{{$f.Setter.GetNameWithOverloadIndex}}_caller(this.h, {{range $index, $elem := $f.Setter.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{else}}
	_, err = {{$c.Name}}_{{$f.Setter.GetNameWithOverloadIndex}}_caller({{range $index, $elem := $f.Setter.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{end}}
	
	return
}
{{end}}{{/* End Setter */}}
{{end}}{{/* End Fields */}}
{{range $findex, $f := $c.Methods}}
func {{GenerateMethodReceiverCode $f}} {{GenerateMethodName $f}}({{GenerateMethodParams $f $m}}) ({{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}} {{ConvertToGoType $elem $m}}{{end}}{{if $f.ReturnValues}},{{end}} err error){
	{{ $paramsLength := len $f.Parameters }}{{ $returnLength := len $f.ReturnValues }}

	var res []interface{}
	{{if $f.InstanceRequired}}
	res, err = {{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller(this.h, {{range $index, $elem := $f.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{else}}
	res, err = {{$c.Name}}_{{$f.GetNameWithOverloadIndex}}_caller({{range $index, $elem := $f.Parameters}}{{if gt $index 0}}{{if gt $index 1}},{{end}}{{$elem.Name}}{{end}}{{end}})
	{{end}}
	if err != nil{
		return
	}
	
	return {{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}res[{{$index}}].({{ConvertToGoType $elem $m}}){{end}}{{if gt $returnLength 0}},{{end}} nil
}
{{end}}{{/* End Methods */}}
{{end}}{{/* End Classes */}}
{{end}}{{/* End modules */}}

`
