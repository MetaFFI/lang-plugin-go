package main

const GuestHeaderTemplate = `
// Code generated by OpenFFI. Modify only in marked places.
// Guest code for {{.IDLFilenameWithExtension}}

package main
`

const GuestImportsTemplate = `
import "fmt"
import "unsafe"
{{range $mindex, $i := .Imports}}
import . "{{$i}}"{{end}}

`

const GuestCImportCGoFileTemplate = `
package main

/*
#cgo !windows LDFLAGS: -L. -ldl
#cgo CFLAGS: -I{{GetEnvVar "OPENFFI_HOME"}}

#include <include/language_plugin_helpers.cpp>
*/
import "C"
`

const GuestCImportTemplate = `
/*
#cgo !windows LDFLAGS: -L. -ldl
#cgo CFLAGS: -I{{GetEnvVar "OPENFFI_HOME"}}

#include <include/language_plugin_helpers.h>
*/
import "C"
`

const GuestMainFunction = `
func main(){} // main function must be declared to create dynamic library
func init(){
	C.xllr_handle = nil

	err := C.load_args_helpers()
	if err != nil{
		panic("Failed to load OpenFFI XLLR functions: "+C.GoString(err))
	}
}
`

const GuestHelperFunctions = `
func errToOutError(out_err **C.char, out_err_len *C.uint64_t, customText string, err error){
	txt := customText
	if err != nil { txt += err.Error() }
	*out_err = C.CString(txt)
	*out_err_len = C.uint64_t(len(txt))
}

func panicHandler(out_err **C.char, out_err_len *C.uint64_t){
	
	if rec := recover(); rec != nil{
		msg := "Panic in Go function. Panic Data: "
		switch recType := rec.(type){
			case error: msg += (rec.(error)).Error()
			case string: msg += rec.(string)
			default: msg += fmt.Sprintf("Panic with type: %v - %v", recType, rec)
		}

		*out_err = C.CString(msg)
		*out_err_len = C.uint64_t(len(msg))
	}
}
`

const GuestFunctionXLLRTemplate = `
// add functions
{{range $mindex, $m := .Modules}}

{{range $findex, $f := $m.Functions}}

// Call to foreign {{$f.PathToForeignFunction.function}}
//export EntryPoint_{{$f.PathToForeignFunction.function}}
func EntryPoint_{{$f.PathToForeignFunction.function}}(parameters **C.void, parameters_length C.uint64_t, return_values **C.void, return_values_length C.uint64_t, out_err **C.char, out_err_len *C.uint64_t){

	// catch panics and return them as errors
	defer panicHandler(out_err, out_err_len)

	// parameters from C to Go
	bufIndex := C.int(0)
	{{range $index, $elem := $f.Parameters}}
	{{if $elem.IsString}}
	{{if $elem.IsArray}}
	var in_{{$elem.Name}}_sizes *C.openffi_size
	var in_{{$elem.Name}}_len C.openffi_size
	in_{{$elem.Name}} := C.get_arg_openffi_string_array((*unsafe.Pointer)(unsafe.Pointer(parameters)), bufIndex, &in_{{$elem.Name}}_sizes, &in_{{$elem.Name}}_len)
	bufIndex += C.int({{CalculateArgLength $elem}})

	{{$elem.Name}} := make([]{{$elem.Type}}, 0)
	for i:=0 ; i<int(in_{{$elem.Name}}_len) ; i++{
		var str_size C.openffi_size
		str := C.get_openffi_string_element(C.int(i), in_{{$elem.Name}}, in_{{$elem.Name}}_sizes, &str_size)
		{{$elem.Name}} = append({{$elem.Name}}, C.GoStringN(str, C.int(str_size)))
	}
	{{else}}
	var in_{{$elem.Name}}_len C.openffi_size
	in_{{$elem.Name}} := C.get_arg_openffi_string((*unsafe.Pointer)(unsafe.Pointer(parameters)), bufIndex, &in_{{$elem.Name}}_len)
	{{$elem.Name}} := C.GoStringN(in_{{$elem.Name}}, C.int(in_{{$elem.Name}}_len))
	bufIndex += C.int({{CalculateArgLength $elem}})
	{{end}}
	{{else}}	
	{{if $elem.IsArray}}
	var in_{{$elem.Name}}_len C.openffi_size
	in_{{$elem.Name}} := C.get_arg_openffi_{{$elem.Type}}_array((*unsafe.Pointer)(unsafe.Pointer(parameters)), bufIndex, &in_{{$elem.Name}}_len)
		
	{{$elem.Name}} := make([]{{$elem.Type}}, 0, int(in_{{$elem.Name}}_len))
	for i:=C.int(0) ; i<C.int(in_{{$elem.Name}}_len) ; i++{
		val := C.get_openffi_{{$elem.Type}}_element(in_{{$elem.Name}}, C.int(i))
		{{$elem.Name}} = append({{$elem.Name}}, {{$elem.Type}}(val))
	}
	bufIndex += C.int({{CalculateArgLength $elem}})
	{{else}}
	in_{{$elem.Name}} := C.get_arg_openffi_{{$elem.Type}}((*unsafe.Pointer)(unsafe.Pointer(parameters)), bufIndex)
	{{$elem.Name}} := {{if eq $elem.Type "bool"}}in_{{$elem.Name}} != C.openffi_bool(0){{else}}{{$elem.Type}}(in_{{$elem.Name}}){{end}}
	bufIndex += C.int({{CalculateArgLength $elem}})
	{{end}}
	{{end}}
	{{end}}
	
	// call original function
	{{range $index, $elem := $f.ReturnValues}}{{if $index}},{{end}}{{$elem.Name}}{{end}}{{if $f.ReturnValues}} := {{end}}{{$f.PathToForeignFunction.function}}({{range $index, $elem := $f.Parameters}}{{if $index}},{{end}}{{$elem.Name}}{{end}})

	// return values
	bufIndex = C.int(0)
	{{range $index, $elem := $f.ReturnValues}}
	if err, isError := interface{}({{$elem.Name}}).(error); isError{ // in case of error
		errToOutError(out_err, out_err_len, "Error returned", err)
		return
	} else { // Convert return values from Go to C
		
		{{if $elem.IsString}}
		{{if $elem.IsArray}}
		out_{{$elem.Name}}_len := C.openffi_size(len({{$elem.Name}}))
		out_{{$elem.Name}} := (*C.openffi_string)(C.malloc(out_{{$elem.Name}}_len*{{Sizeof $elem}}))
		out_{{$elem.Name}}_sizes := (*C.openffi_size)(C.malloc(out_{{$elem.Name}}_len*{{Sizeof $elem}}))
		for i, val := range {{$elem.Name}}{
			C.set_openffi_string_element(C.int(i), out_{{$elem.Name}}, out_{{$elem.Name}}_sizes, C.openffi_string(C.CString(val)), C.openffi_size(len(val)))
		}
		C.set_arg_openffi_string_array((*unsafe.Pointer)(unsafe.Pointer(return_values)), bufIndex, out_{{$elem.Name}}, out_{{$elem.Name}}_sizes, &out_{{$elem.Name}}_len)
		bufIndex += C.int({{CalculateArgLength $elem}})
		{{else}}
		out_{{$elem.Name}}_len := C.openffi_size(len({{$elem.Name}}))
		out_{{$elem.Name}} := C.CString({{$elem.Name}})
		in_{{$elem.Name}} := (C.openffi_{{$elem.Type}})(C.get_arg_openffi_string(parameters, bufIndex, &in_{{$elem.Name}}_len))
		{{$elem.Name}} := C.GoStringN(in_{{$elem.Name}}, C.int(in_{{$elem.Name}}_len))
		C.set_arg_openffi_string((*unsafe.Pointer)(unsafe.Pointer(return_values)), bufIndex, out_{{$elem.Name}}, &out_{{$elem.Name}}_len)
		bufIndex += C.int({{CalculateArgLength $elem}})
		{{end}}
		{{else}}
		{{if $elem.IsArray}}
		out_{{$elem.Name}}_len := C.openffi_size(len({{$elem.Name}}))
		out_{{$elem.Name}} := (*C.openffi_{{$elem.Type}})(C.malloc(out_{{$elem.Name}}_len*{{Sizeof $elem}}))
		for i, val := range {{$elem.Name}}{
			C.set_openffi_{{$elem.Type}}_element(C.int(i), out_{{$elem.Name}}, C.openffi_{{$elem.Type}}(val))
		}
		C.set_arg_openffi_{{$elem.Type}}_array((*unsafe.Pointer)(unsafe.Pointer(return_values)), bufIndex, out_{{$elem.Name}}, &out_{{$elem.Name}}_len)
		bufIndex += C.int({{CalculateArgLength $elem}})
		{{else}}
		out_{{$elem.Name}} := C.openffi_{{$elem.Type}}({{$elem.Name}})
		C.set_arg_openffi_{{$elem.Type}}((*unsafe.Pointer)(unsafe.Pointer(return_values)), bufIndex, &out_{{$elem.Name}})
		bufIndex += C.int({{CalculateArgLength $elem}})
		{{end}}
		{{end}}
	}	
	{{end}}	
}
{{end}}{{end}}
`
