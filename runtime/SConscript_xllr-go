import SCons.Environment
import SCons.Script
import SCons.Node
import SCons.Node.FS
import glob
import SCons.Script.SConsOptions
import compiler_options
import post_actions
import platform
import scons_utils
from site_scons import ALIAS_GO, ALIAS_GO_UNITTESTS

# * Import the parent Environment
env: SCons.Environment.Environment
SCons.Script.Import('env')


# * ---- Build XLLR dynamic library ----
env_xllr_go = env.Clone()
env_xllr_go.LoadConanPackagesInfo()

source = env['sdk_src']
source += [s for s in glob.glob(env_xllr_go.Dir('.').abspath + '/*.cpp') if not s.endswith("_test.cpp")]

includes = [env['sdk_path']]
includes.append(env_xllr_go.Dir('.').abspath)

if platform.system() == 'Linux' or platform.system() == 'Darwin':
	env_xllr_go.Append(LINKFLAGS=['-Wl,-rpath,$ORIGIN'])

xllr_go_dylib = env_xllr_go.CPPSharedLibrary(target='xllr.go', project_name='go', sources=source, include_dirs=includes)
xllr_go_install = env_xllr_go.Install(env_xllr_go['METAFFI_HOME']+'/go', xllr_go_dylib)

# install boost_filesystem.dll
xllr_go_dependencies_install = env_xllr_go.Install(env_xllr_go['METAFFI_HOME']+'/go', env_xllr_go.SearchConanBinaryFile('boost', f'*boost_filesystem*'))
if not env.IsWindows(): # non-windows also uses boost thread
	xllr_go_dependencies_install.extend(env.Install(env['METAFFI_HOME']+'/go', env_xllr_go.SearchConanBinaryFile('boost', f'*boost_thread*')))
	xllr_go_dependencies_install.extend(env.Install(env['METAFFI_HOME']+'/go', env_xllr_go.SearchConanBinaryFile('boost', f'*boost_stacktrace_from_exception*')))

SCons.Script.Alias(ALIAS_GO, [xllr_go_dylib, xllr_go_install, xllr_go_dependencies_install])

# to be used by other targets in the project as dependency
env['xllr_go_dylib'] = xllr_go_dylib

# * --- Unit Tests ---
# build test target
env_go_unitest_file = env.Clone()
env_go_unitest_file.LoadConanPackagesInfo()
create_target = env_go_unitest_file.MetaFFICompileGuest(output_dir=env_go_unitest_file.Dir('.').abspath+f'/test/', source_idl=env_xllr_go.Dir('.').abspath+'/test/TestRuntime.go')
env_go_unitest_file.Depends(create_target, ALIAS_GO)
SCons.Script.Alias(ALIAS_GO_UNITTESTS, create_target)


includes = []
includes.extend(env_go_unitest_file['sdk_includes'])
includes.append(env_go_unitest_file['sdk_path'])

libs = []
lib_dirs = []
if env_go_unitest_file.IsWindows():
	libs.append('xllr.go.lib')
	lib_dirs.append(xllr_go_dylib[0].dir.abspath)
else:
	metaffi_home = env_go_unitest_file['METAFFI_HOME']
	libs.append('-l:xllr.go.so')
	lib_dirs.append(f'{metaffi_home}/go')

# dependet on XLLR dynamic library
go_runtime_test: SCons.Node.NodeList = env_go_unitest_file.CPPProgram(target='go_api_test',
															project_name='go',
															sources=[
																env_go_unitest_file.Dir('.').File('go_api_test.cpp').abspath
															],
															include_dirs=[
																includes
															],
															lib_dirs=lib_dirs,
															libs=libs)
env_go_unitest_file.Depends(go_runtime_test, create_target)

copy_test_file_to_dest = env_go_unitest_file.Install(env_go_unitest_file.Dir('.').abspath, go_runtime_test)
env_go_unitest_file.Depends(copy_test_file_to_dest, go_runtime_test)

env_go_unitest_file.AddPostAction(copy_test_file_to_dest, post_actions.execute_doctest_unitest)


SCons.Script.Alias(ALIAS_GO_UNITTESTS, go_runtime_test)